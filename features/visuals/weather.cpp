#include "../visuals/visuals.hpp"
#include "../../menu/config/config.hpp"
#include "../../menu/menu.hpp"

static unsigned char collide_data[] =
{
   0xB8, 0x01, 0x00, 0x00, 0x56, 0x50, 0x48, 0x59, 0x00,
   0x01, 0x00, 0x00, 0x9C, 0x01, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80,
   0x3F, 0x00, 0x00, 0x00, 0x00, 0x20, 0x16, 0x6A, 0xC1,
   0xC0, 0x0E, 0x1C, 0xC1, 0x80, 0x13, 0xD0, 0x3F, 0xE2,
   0x26, 0x11, 0x48, 0xE2, 0x26, 0x11, 0x48, 0xE2, 0x26,
   0x11, 0x48, 0x72, 0x4E, 0x08, 0x44, 0xD1, 0x9C, 0x01,
   0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x49, 0x56, 0x50, 0x53, 0xD0,
   0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x15,
   0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00,
   0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x03, 0x00,
   0x02, 0x00, 0x12, 0x00, 0x01, 0x80, 0x00, 0x00, 0x02,
   0x00, 0xFD, 0x7F, 0x01, 0x00, 0x15, 0x00, 0x03, 0x00,
   0x28, 0x00, 0x02, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x06,
   0x00, 0x04, 0x00, 0x0F, 0x00, 0x01, 0x00, 0xF6, 0x7F,
   0x03, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05,
   0x00, 0x15, 0x00, 0x04, 0x00, 0xFA, 0x7F, 0x04, 0x70,
   0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x13,
   0x00, 0x05, 0x00, 0xFA, 0x7F, 0x05, 0x60, 0x00, 0x00,
   0x00, 0x00, 0xEE, 0x7F, 0x02, 0x00, 0x18, 0x00, 0x06,
   0x00, 0xFA, 0x7F, 0x06, 0x50, 0x00, 0x00, 0x01, 0x00,
   0xF1, 0x7F, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0xEB,
   0x7F, 0x07, 0x40, 0x00, 0x00, 0x03, 0x00, 0xFD, 0x7F,
   0x04, 0x00, 0x04, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x08,
   0x10, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00,
   0xFC, 0x7F, 0x04, 0x00, 0xEB, 0x7F, 0x09, 0x00, 0x00,
   0x00, 0x05, 0x00, 0xED, 0x7F, 0x06, 0x00, 0x03, 0x00,
   0x07, 0x00, 0xFA, 0x7F, 0x0A, 0x30, 0x00, 0x00, 0x07,
   0x00, 0xFD, 0x7F, 0x06, 0x00, 0x03, 0x00, 0x03, 0x00,
   0xF4, 0x7F, 0x0B, 0x20, 0x00, 0x00, 0x03, 0x00, 0xFD,
   0x7F, 0x06, 0x00, 0xE8, 0x7F, 0x02, 0x00, 0xD8, 0x7F,
   0x46, 0xAD, 0x9D, 0xC3, 0x1F, 0x0D, 0x9C, 0xC3, 0x80,
   0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD,
   0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43, 0x80, 0xAE, 0xAA,
   0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3,
   0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3, 0x00,
   0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C,
   0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00,
   0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
   0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4,
   0x0B, 0x8F, 0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE,
   0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F,
   0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3,
   0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33,
   0x4C, 0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xFE, 0xFF,
   0xFF, 0x20, 0x16, 0x6A, 0xC1, 0xC0, 0x0E, 0x1C, 0xC1,
   0x80, 0x13, 0xD0, 0x3F, 0x72, 0x4E, 0x08, 0x44, 0x8A,
   0x8B, 0x9C, 0x00, 0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20,
   0x7B, 0x0A, 0x22, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x22,
   0x20, 0x22, 0x30, 0x22, 0x0A, 0x22, 0x6D, 0x61, 0x73,
   0x73, 0x22, 0x20, 0x22, 0x35, 0x30, 0x30, 0x30, 0x30,
   0x2E, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x0A,
   0x22, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x70,
   0x72, 0x6F, 0x70, 0x22, 0x20, 0x22, 0x64, 0x65, 0x66,
   0x61, 0x75, 0x6C, 0x74, 0x22, 0x0A, 0x22, 0x76, 0x6F,
   0x6C, 0x75, 0x6D, 0x65, 0x22, 0x20, 0x22, 0x31, 0x35,
   0x30, 0x38, 0x30, 0x32, 0x33, 0x32, 0x30, 0x35, 0x38,
   0x38, 0x38, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30,
   0x30, 0x22, 0x0A, 0x7D, 0x0A, 0x00
};

void features::visuals::weather::create_precip_entity(precip_entity_t* ent_info, precipitation_type_t precip_mode)
{
	static c_client_class* precipitation_client_class = nullptr;

	if (!precipitation_client_class)
	{
		for (auto pclass = interfaces::client->get_all_classes(); pclass && !precipitation_client_class; pclass = pclass->next_ptr)
		{
			if (pclass->class_id == class_ids::C_PRECIPITATION)
			{
				precipitation_client_class = pclass;
			}
		}
	}

	 ent_info->m_networkable = ((i_client_networkable * (*)(int, int))precipitation_client_class->create_fn)(MAX_EDICTS - 1, 0); 

	if (!ent_info->m_networkable)
	{
		return;
	}

	if (!ent_info->m_collide_init)
	{
		interfaces::physics_collision->collide_load(&ent_info->m_collide, 1, (const char*)collide_data, 546, false);
		ent_info->m_collide_init = true;
	}

	ent_info->m_entity = static_cast<entity_t*>(interfaces::ent_list->get_client_entity(MAX_EDICTS - 1));

	ent_info->m_entity->net_pre_data_update(0);
	ent_info->m_entity->pre_data_change(0);

	ent_info->m_entity->precip_type() = precip_mode;
	ent_info->m_entity->collideable()->mins() = vec3_t(-2048.f, -2048.f, -2048.f);
	ent_info->m_entity->collideable()->maxs() = vec3_t(2048.f, 2048.f, 2048.f);

	ent_info->m_entity->model_index() = ent_info->m_model_index;
	*(bool*)((uintptr_t)ent_info->m_entity + 0xED) = false;

	ent_info->m_entity->on_data_changed(0);
	ent_info->m_entity->post_data_update(0);

	if (precip_mode == PRECIPITATION_TYPE_PARTICLESNOW)
	{
		*reinterpret_cast<float*>(reinterpret_cast<uintptr_t>(ent_info->m_entity) + 0xA64) = 0.f;
	}
}

void features::visuals::weather::precipitation_update()
{
	if (m_precip_list.empty())
	{
		return;
	}

	static auto r_RainParticleDensity = interfaces::console->get_convar("r_RainParticleDensity")->get_float();
	static auto r_RainRadius = interfaces::console->get_convar("r_RainRadius")->get_float();
	interfaces::console->get_convar("r_RainParticleDensity")->callbacks.clear();
	interfaces::console->get_convar("r_RainRadius")->callbacks.clear();

	if (c::visuals::world::weather::custom_density)
	{
		interfaces::console->get_convar("r_RainParticleDensity")->set_value(c::visuals::world::weather::density);
	}
	else
	{
		interfaces::console->get_convar("r_RainParticleDensity")->set_value(r_RainParticleDensity);
	}

	if (c::visuals::world::weather::custom_radius)
	{
		interfaces::console->get_convar("r_RainRadius")->set_value(c::visuals::world::weather::radius);
	}
	else
	{
		interfaces::console->get_convar("r_RainRadius")->set_value(r_RainRadius);
	}
}

void features::visuals::weather::unload_precip_entity(precip_entity_t& precip)
{
	static auto destructor = reinterpret_cast<void(__thiscall*) (void*)>(find_pattern("client.dll", "55 8B EC 51 56 8B F1 8D 45 FC 57"));

	precip.m_entity->model_index() = 0;
	destructor(precip.m_entity);

	if (precip.m_collide_init)
	{
		interfaces::physics_collision->collide_unload(&precip.m_collide);
	}
}

void features::visuals::weather::remove_unused_entities(precipitation_type_t type)
{
	if (m_precip_list.empty())
	{
		return;
	}

	bool clear = false;

	for (auto& it : m_precip_list)
	{
		if (it.m_type != type)
		{
			unload_precip_entity(it);
			clear = true;
		}
	}

	if (clear)
	{
		m_precip_list.clear();
	}
}

bool features::visuals::weather::is_type_active(precipitation_type_t type)
{
	for (auto& it : m_precip_list)
	{
		if (it.m_type == type)
		{
			return true;
		}
	}

	return false;
}

void features::visuals::weather::apply_weather_effect(precipitation_type_t type)
{
	const int mdl_index = 0x7FF;

	precip_entity_t& precip_ent = m_precip_list.emplace_back();
	precip_ent.m_mins = vec3_t(-2048.f, -2048.f, -2048.f);
	precip_ent.m_maxs = vec3_t(2048.f, 2048.f, 2048.f);
	precip_ent.m_collide_init = false;
	precip_ent.m_model_index = mdl_index - 0x800;
	precip_ent.m_abs_model_index = mdl_index;
	memset(&precip_ent.m_collide, 0, sizeof(precip_ent.m_collide));

	precip_ent.m_type = type;

	create_precip_entity(&precip_ent, type);
}

void features::visuals::weather::clean_up_precipitation()
{
	if (m_precip_list.empty())
	{
		return;
	}

	for (auto& it : m_precip_list)
	{
		unload_precip_entity(it);
	}

	m_precip_list.clear();
}

void features::visuals::weather::precipitation_main(client_frame_stage_t stage, bool original_called)
{
	if (interfaces::client_state->m_delta_tick == -1 || !c::visuals::world::weather::enable)
	{
		clean_up_precipitation();
		return;
	}

	if (stage == frame_start)
	{
		switch (c::visuals::world::weather::type)
		{
		case 0:
			remove_unused_entities(PRECIPITATION_TYPE_PARTICLERAIN);
			if (is_type_active(PRECIPITATION_TYPE_PARTICLERAIN))
				return;

			apply_weather_effect(PRECIPITATION_TYPE_PARTICLERAIN);
			break;
		case 1:
			remove_unused_entities(PRECIPITATION_TYPE_PARTICLESNOW);
			if (is_type_active(PRECIPITATION_TYPE_PARTICLESNOW))
				return;

			apply_weather_effect(PRECIPITATION_TYPE_PARTICLESNOW);

			break;
		case 2:
			remove_unused_entities(PRECIPITATION_TYPE_PARTICLERAINSTORM);
			if (is_type_active(PRECIPITATION_TYPE_PARTICLERAINSTORM))
				return;

			apply_weather_effect(PRECIPITATION_TYPE_PARTICLERAINSTORM);
			break;
		case 3:
			remove_unused_entities(PRECIPITATION_TYPE_ASH);
			if (is_type_active(PRECIPITATION_TYPE_ASH))
				return;

			apply_weather_effect(PRECIPITATION_TYPE_ASH);
			break;
		}
	}

	if (!original_called)
	{
		return;
	}

	if (stage == frame_render_start)
	{
		for (auto it : m_precip_list)
		{
			if (!it.m_entity)
			{
				continue;
			}

			auto new_mins = g::local->get_eye_pos() + it.m_mins;
			auto new_maxs = g::local->get_eye_pos() + it.m_maxs;

			it.m_entity->collideable()->mins() = new_mins;
			it.m_entity->collideable()->maxs() = new_maxs;
		}
	}
}